                    STATE

*Unlike props(which is data sent from parent node to child), 
    -state is data that is controlled by the component itself.

*We store state in an object

*Using state allows us to keep track of data within a component,
    rather than relying on data sent as props from parent

*State allows us to make our app more dynamic

*Anytime the state is changed, the component will re-render.

                
                CONSTRUCTOR/SETTING INITIAL STATE


*If we don't define a constructor method within our class, it will be inherited
    from the Component class 

*When we want a component to have a state, we will set the initial state within
    the CONSTRUCTOR which means we will be OVERRIDING the constructor inherited 
    from component class.

*We set our initial state as a property within the CONSTRUCTOR
    EX:     this.state = {list: [["Dog Food", "Harness"]]}
                ^           ^               ^
            ^
            ^
    this(our component obj)
    giving it a property of state


                            SUPER

*In our constructor we MUST call the SUPER method BEFORE setting initial state

*The SUPER method refers to the CONSTRUCTOR method in the parent class(Component)

*By calling SUPER we are executing the constructor defined in Component,
    which is absolutely necessary bc that constructor defines imp
    attributes on our instance - most notably, PROPS

*The value of the THIS keyword will be undefined unless we call SUPER

*We do NOT NEED to define a constructor, but if we WANT to set initial state,
    this is a good place to do it bc it runs before the RENDER method.


                            UPDATING STATE        

*we can NOT update state by just assigning new value, bc doing so will 
    NOT trigger the component to re-render and we wont see a changed
        ex) this.state.list = ["new", "array"]      <---NO

** INSTEAD, we must use the setState method that is inherited from Component class
        ex) this.setState({list: [...this.state.list, "Cereal"]})

*the setState method can take in either an object OR a function to update our state
        **safer to use the function!!


                            WHY setState?

*the setState method ALWAYS triggers a rerender (updating the DOM)

*the setState method is asynchronous (to save from unnecessary rendering)
    (*aka will try to batch all the setState calls in your app, but the rest of
    your code will still run while react is getting them all together)

*The setState method merges our new state with the current state which means 
    we can update a single key-value pair in our state without overriding other pairs


    **THE ONLY WAY TO SEND INFO FROM CHILD TO PARENT IS WITH CALLBACK FUNCTIONS**
            --(ITEM CLASS line 9)--


            DIFFERENT WAYS TO CREATE CALLBACK FOR EVENTS


<button onClick={this.handleClick.bind(this)}>Click Me:</button>
    **no need to define another function when binding this 
        -you are basically pulling the function out of itself and binding this
<button onClick={(e) => this.handleClick(e, "string")}>Click Me:</button>
    **this one would need another arg in function 
        ex) -- handleClick(e, otherArg){} --
<button onClick={function(e) {this.handleClick(e)}}>Click Me:</button>
<button onClick={(e) => console.log("clicked!")}>Click Me:</button>



                        FORMS


*a JSX form looks almost identical to HTML form

*still need to set up event handler for submitting

*still need to prevent the default behavior for the form inside 
    the event handler function


                    UNCONTROLLED Component

    *A UNCONTROLLED component is one where we don't control the user input
        values in our state and instead rely on the DOM

    *the main case for using an UNCONTROLLED component is if you have a very
        simple form that doesn't require instant input validation OR
        -if each input has to handle the data differently

    *in order to access the input values in an UNCONTROLLED component we need
        to use refs (a way to reference an element that is on the DOM)

    *We should almost always write controlled components

                CONSOLE WITH FORM DEBUGGER

        (in constructor, under super())
this.input = React.createRef() 

<input type="text" ref={this.input}/>
        //creates a REFERENCE to an element that lives on the DOM

    e
SyntheticBaseEvent {_reactName: "onSubmit", _targetInst: null, type: "submit", nativeEvent: SubmitEvent, target: form, …}
e.target
<form>​<input type=​"text">​<input type=​"submit">​</form>​
this.input
{current: input}
this.input.current.value
"harness"

                CONTROLLED components

    *a controlled component is one where we control the value of any user
        input within our state
    
    *in react, we set the value of our inputs to a corresponding value
        in our state and use an onChange event

    *when a user enters something, we update our state with that value
        which then triggers a re-render to update the DOM


                DYNAMICALLY UPDATING STATE

    *If we have a big form with a lot of inputs we don't want to have to 
        write out an event handler for each input

    *INSTEAD, we can define a single event handler and use the SyntheticEvent
        object to help us update the state

    *If we provide each of our inputs with a name property, we can then access 
        that value through the SyntheticEvent object in our event handler
            EX) -- {[e.target.name]: e.target.value} 

    *brackets create the key 

                LIFECYCLE METHODS aka PHASES

*the PRE-MOUNTING phase is the BIRTH of our component and occurs BEFORE
    the component is mounted to the DOM 
            **HAPPENS IN ______ METHOD:
        * -->> constructor (when its being instantiated)

*the MOUNTING phase occurs when our component is initially being rendered
    to the DOM
        * --> render
        * --> componentDidMount (aka 'has this component been mounted?')

*the UPDATING phase occurs when any change is made to props or state
        * --> render
        * --> componentDidUpdate

*the UNMOUNTING phase occurs when the component is being removed from the DOM
        * --> componentWillUnmount

                LIFECYCLE METHODS in DETAIL:

                        *CONSTRUCTOR*
    
    :first lifecycle method to execute and should be used to set up
        local state and can be used to BIND METHODS
    :we MUST call SUPER within our constructor - the constructor we invoke
        we inherit from Component and to set the value of THIS within constructor
    :if we're not setting state or binding methods, we DO NOT NEED constructor
    :constructor method runs ONCE in a component's life cycle

                        *RENDER*

    :the RENDER method is the ONLY REQUIRED lifecycle method
    :we MUST RETURN one of the following from render_
        -React elements - either JSX or another component
        -arrays and fragments
        -portals - allow you to render a child onto an element outside
            of the parent's node tree
        -string and numbers - rendered as text nodes on the DOM
        -booleans or null - render nothing
    :the render method should be pure - this means it does NOT modify
        a component's State - *otherwise will create infinite loop*
            BECAUSE setState triggers another re-render
    :the render method runs whenever there is a change to props or state

                    *componentDidMount* 

    :the ComponentDidMount method is invoked right after the component
        is rendered to the DOM
    :the ComponentDidMount method is a good place to make calls to an API
        since the initial content will already be rendered on the DOM
            *- we also use componentDidMount to set up subscriptions
                (something you're doing over and over)
    :if there is a change of the state, the render method will be invoked again
    :this method runs ONLY ONCE after the initial render in lifecycle

                *componentDidUpdate*

    :the componentDidUpdate is invoked after any update occurs but is 
        NOT invoked after the initial render
    :this method can accept 3 arguments -
        1) previous props
        2) previous state
        3) snapshot
            *the snapshot value will be whatever is returned from getSnapshotBeforeUpdate
    :we can call setState within componentDidUpdate but it MUST be wrapped in a condition
    :runs whenever there is a change to props or state

                *componentWillUnmount*

    :the componentWillUnmount method is invoked just before a component
        is unmounted and destroyed
    :we use this method as a cleanup method to remove any subscriptions
        that were set up in componentDidMount
    :we should not call setState in componentWillUnmount because the 
        component is about to be destroyed
    :this is only called ONCE when its unmounted


*Best Practice is to set your components state as a skeleton of your API or what youre rendering
    

                    REACT AND asynchronous JS

*react allows us to use the fetch API and other AJAX libs to get data from API
*we make our AJAX calls to get initial data within the componentDidMount
*we also make AJAX calls in event handler functions to send data to 
    an API to be saved in the db and then update our state w/ data we receive




                    REACT COMPONENTS 


*so far weve set up all our components as classes
*Class components can:
    *have state
    *receive props
    *include lifecycle methods
*class components MUST have render method
*we can choose to always use class components but not always necessary


                    FUNCTIONAL COMPONENTS

*we can also define components as regular javascript functions
*since functional components are just plain old functions, we do not have
    access to many of the features we get with classes
*Functional components:
    1) can receive props
    2) cannot set state*
    3) do not have lifecycle methods*
*Functional components must return JSX or any of the other valid types
    (ie strings, booleans, etc)
        **we now have hooks which enable us to keep track of state in
        functional components as well as set up what resembles lifecycle methods**


        CLASS vs FUNCTIONAL COMPONENTS

*PRIOR TO HOOKS:
    --wed make a decision about whether to use a class or functional component
        based on whether it needs to store state and/or utilize lifecycle methods
    --when we had a CLASS component, React creates a new instance of a class
        and calls the render method on that instance - anytime the component
        needs to re-render, we are still dealing with the SAME object
    --when we have a FUNCTIONAL component, React is simply invoking that
        function which returns a JSX object - anytime the component needs to
        re-render that function must be invoked AGAIN


                    *PRESENTATIONAL vs CONTAINER components*
        *there are only 2 ways to define components - classes or functions
        *the terms PRESENTATIONAL and CONTAINER just refer to a way that we can 
            organize/structure our components
        *PRESENTATIONAL components are those that simply receive info and display it
        *CONTAINER components are those that request data and keep track of that 
            data in state

                        CONTAINER COMPONENTS

        :concerned with how things work NOT how they look
        :have state
        :send data to other components
        :do not actually display any data themselves
        :THESE ARE PARENT COMPONENTS
        :usually but not always these are CLASS components

                        PRESENTATIONAL COMPONENTS

        :concerned with how things look not work
        :usually dont have state
        :receive data exclusively through props
        :present the data received through props
        :THESE ARE CHILD COMPONENTS
        :usually, but not always, functional components

                




